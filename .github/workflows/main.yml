name: continuous-integration
on:
  push:
    branches: master
# on:
#   pull_request:
#     types: [closed]
#     branches:
#       - master
# on:
#   push:
#     branches: master
# environment variables available to all jobs and steps in this workflow
env:
  github_sha: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
        with:
            fetch-depth: 1
      # - name: debug
      #   uses: hmarr/debug-action@master
      - name: Set environment variables
        run: | 
            echo '::set-env name=TERM::xterm'
      - name: Pull in docker images
        run: |
            source .env
            echo ' - pull in my docker images as helpers'
            docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }} &>/dev/null
            docker pull ${XQERL_DOCKER_IMAGE}
            docker pull ${PROXY_DOCKER_IMAGE}
            docker pull docker.pkg.github.com/grantmacken/alpine-scour/scour:0.0.2
            docker pull docker.pkg.github.com/grantmacken/alpine-zopfli/zopfli:0.0.1
            docker pull docker.pkg.github.com/grantmacken/alpine-cssnano/cssnano:0.0.3
      - name: Bring up the xqerl container, compile xQuery, then test restXQ routes
        run: |
            source .env
            source .env
            pushd site/${DOMAIN}
            echo ' starting xqerl will also: '
            echo ' - create the volumes we require'
            echo ' - create the network we require'
            echo ' after starting `make` will'
            echo ' - clean the build'
            echo ' - compile build xQuery files to run on the beam'
            echo ' - run some curl tests for restXQ routes using the '
            echo '  the xqerl container internal IPAddress and published port'
            make up
            popd
      - name: From static assets build pipeline to 'static-assets' volume
        run: |
            source .env   
            echo " - build static assets for ${DOMAIN} website" 
            pushd site/${DOMAIN}
            make assets
            popd
      - name: Create generic Nginx configuration
        run: |
            source .env   
            pushd proxy 
            make
            popd
      - name: Setup Gcloud
        uses: googlecloudplatform/github-actions/setup-gcloud@master
        with:
            version: "270.0.0"
            service_account_email: ${{ secrets.client_email }}
            service_account_key: ${{ secrets.gce_key }}
      - name: Configure GCE project
        run: |
            source .env
            gcloud config set project ${GCE_PROJECT}
            gcloud config set compute/zone ${GCE_ZONE}
            # gcloud compute instances list
            gcloud compute config-ssh &>/dev/null
            #gcloud info
      - name: Fetch certs and put into 'letsencypt' volume
        run: |
            source .env
            pushd proxy
            make certs-into-vol
            #make modify-hosts-file
            popd
      - name: Bring proxy container up on 'github-actions'  host
        run: |
            pushd proxy
            make up
            make info
            popd
      # - name: Use Curl with Grep to run some website tests
      #   run: |
      #       source .env
      #       pushd site/${DOMAIN}/tests
      #       make 
      #       popd
      - name: Take both containers down
        run: |
            source .env
            pushd site/${DOMAIN} 
            make down
            popd
            pushd proxy
            make down
            popd
      # - name: GCE host pull in docker images
      #   run: |
      #       source .env
      #       gcloud compute ssh ${GCE_NAME} --command \
      #       "docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.GITHUB_TOKEN }}" $>/dev/null
      #       gcloud compute ssh ${GCE_NAME} --command "docker pull ${XQERL_DOCKER_IMAGE}"
      #       gcloud compute ssh ${GCE_NAME} --command "docker pull ${PROXY_DOCKER_IMAGE}"
      - name: GCE Host Checks
        run: |
            source .env
            pushd site/${DOMAIN}  &>/dev/null
            make gcloud-check-volumes
            popd &>/dev/null
            pushd proxy &>/dev/null
            make gcloud-check-volumes
            popd &>/dev/null
      - name: Deploy 'static assets' in GCE host as a docker volume named 'static-assets'
        run: |
            source .env
            pushd site/${DOMAIN} &>/dev/null
            make gcloud-assets-volume-deploy
            popd &>/dev/null
      - name: Deploy 'nginx configuration' in GCE host as a docker volume named 'nginx configuration'
        run: |
            source .env
            pushd proxy
            make gcloud-conf-volume-deploy
            popd
      ##- name: Deploy 'xqerl compiled code' in GCE host as a docker volume named 'xqerl-compiled-code'
      ##  run: |
      ##      source .env
      ##      pushd site/${DOMAIN}
      ##      make gcloud-code-volume-deploy
      ##      popd
      ##- name: Enable restXQ routing by recompiling code on running xqerl container
      ##  run: |
      ##      source .env
      ##      pushd site/${DOMAIN}
      ##      make gcloud-xqerl-up
      ##      make gcloud-code-compile
      ##      make gcloud-show-lib-namespaces
      ##      # TODO check routes on internal IP
      ##      popd
      ##- name: Enable nginx reverse proxy server 
      ##  run: |
      ##      source .env
      ##      pushd proxy
      ##      make gcloud-proxy-up
      ##      # TODO check routes on internal IP
      ##      popd



