name: continuous-integration
on:
  push:
    branches:
      - master
#https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onevent_nametypes
# environment variables available to all jobs and steps in this workflow
env:
  github_sha: ${{ github.sha }}
  UPLOAD_XQERL_COMPILED_CODE: 'true'
jobs:
  build:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
      with:
          fetch-depth: 1
    - name: Set environment variables
      run: |
          source .env
          echo '::set-env name=TERM::xterm'
    - name: Pull in docker images
      run: |
          source .env
          docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }} &>/dev/null
          echo ' - pull in main docker images'
          docker pull ${XQERL_DOCKER_IMAGE}
          docker pull ${PROXY_DOCKER_IMAGE}
          echo ' - pull in my docker images as helpers'
          docker pull docker.pkg.github.com/grantmacken/alpine-scour/scour:0.0.2
          docker pull docker.pkg.github.com/grantmacken/alpine-zopfli/zopfli:0.0.1
          docker pull docker.pkg.github.com/grantmacken/alpine-cssnano/cssnano:0.0.3
    - name: Setup gcloud
      uses: googlecloudplatform/github-actions/setup-gcloud@master
      with:
          version: "270.0.0"
          service_account_email: ${{ secrets.client_email }}
          service_account_key: ${{ secrets.gce_key }}
    - name: Configure GCE project
      run: |
          source .env
          echo ' - set up GCE project from .env vars '
          gcloud config set project ${GCE_PROJECT}
          gcloud config set compute/zone ${GCE_ZONE}
          # gcloud compute instances list
          gcloud compute config-ssh &>/dev/null
          gcloud compute ssh ${GCE_NAME} --command \
          "docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }}"
          gcloud compute ssh ${GCE_NAME} --command \
          "docker pull ${XQERL_DOCKER_IMAGE} && docker pull ${PROXY_DOCKER_IMAGE}"
    - name: Check for previous deployments
      run: |
          source .env
          gcloud compute ssh ${GCE_NAME} --command \
          "ls deploy" > deployedTars.list
          echo ::set-env name=DEPLOYED_NGINX_CONFIGURATION::$(grep 'nginx-configuration.tar' deployedTars.list && echo 'true' || echo 'false' )
          echo ::set-env name=DEPLOYED_XQERL_COMPILE_CODE::$(grep 'xqerl-compile-code.tar' deployedTars.list && echo 'true' || echo 'false' )
          echo ::set-env name=DEPLOYED_STATIC_ASSETS::$(grep 'static-assets.tar' deployedTars.list && echo 'true' || echo 'false' )
    # - name: If deployed get previous nginx-configuration deploy hash
    #   if:  ${{ env.DEPLOYED_NGINX_CONFIGURATION}} == 'true'
    #   run: |
    #      echo ' previous nginx-configuration tar exists'
    #      source .env
    #      gcloud compute ssh ${GCE_NAME} --command \
    #      "docker run --rm --workdir /home --volume /home/${GCE_NAME}/deploy:/tmp \
    #       --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} nginx-configuration.tar" | tee deployed-nginx-configuration.hash
    # - name: If deployed upload previous nginx-configuration hash as an artifact
    #   if:  ${{ env.DEPLOYED_NGINX_CONFIGURATION}} == 'true'
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: deployed-nginx-configuration-hash
    #     path: deployed-nginx-configuration.hash
    # - name: If deployed get previous static-assets deploy hash
    #   if:  ${{ env.DEPLOYED_STATIC_ASSETS}} == 'true'
    #   run: |
    #      source .env
    #      gcloud compute ssh ${GCE_NAME} --command \
    #      "docker run --rm --volume /home/${GCE_NAME}/deploy:/tmp \
    #       --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} /tmp/static-assets.tar" | tee deployed-static-assets.hash
    # - name: If deployed upload previous static-assets hash as an artifact
    #   if:  ${{ env.DEPLOYED_STATIC_ASSETS}} == 'true'
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: deployed-static-assets-hash
    #     path: deployed-static-assets.hash
    - name: If xqerl-compiled-code deployed get deploy hash
      if:  ${{ env.DEPLOYED_XQERL_COMPILED_CODE}} == 'true'
      run: |
         source .env
         gcloud compute ssh ${GCE_NAME} --command 'ls -al deploy'
         gcloud compute ssh ${GCE_NAME} --command 'md5sum deploy/xqerl-compiled-code.tar' | tee xqerl-compiled-code.hashes
    - name: Bring up the xqerl container, compile xQuery, then test restXQ routes
      run: |
          source .env
          echo ' starting xqerl will also: '
          echo ' - create the volumes we require'
          echo ' - create the network we require'
          make xqerl-up
          echo ' - compile build xQuery files to run on the beam'
          echo ' - the build artifact is the **xqerl-compiled-code.tar**'
          make xqerl-build
          #ls -al deploy/xqerl-compiled-code.tar
          echo ' - take a peek at the running xqerl container instance'
          make xqerl-info
          echo ' - before we place a reverse proxy server before xqerl '
          echo '   we can test our **restXQ routes** using  *curl* and '
          echo '   the xqerl internal IPAddress and published port'
          make xqerl-tests
          echo 'append a hash of newly built xqerl-compiled-code.tar to file: [ xqerl-compiled-code.hashes ] '
          md5sum deploy/xqerl-compiled-code.tar | tee xqerl-compiled-code.hashes
          # we only need to upload if the md5sum hashes are different
          echo ::set-env name=DEPLOY_XQERL_COMPILED_CODE::$( md5sum --check xqerl-compiled-code.hashes && echo 'false' || echo 'true' )
          echo ${{ env.DEPLOY_XQERL_COM }}
    - name: Given check hashes if xqerl-compiled-code hashes is 'false' then  
      if:  ${{ env.DEPLOY_XQERL_COMPILED_CODE }}
      run: |
         echo ${{ env.DEPLOY_XQERL_COMPILED_CODE }}

       
      #   uses: actions/upload-artifact@v1
    #   if:  ${{ env.UPLOAD_XQERL_COMPILED_CODE}} == 'true'
    #   uses: actions/upload-artifact@v1PILED_CODE }}
    # - name: If upload xqerl-compiled-code hashes
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: xqerl-compiled-code-hashes
    #     path: xqerl-compiled-code.hashes
    # - name: If upload required then upload tar artifact
    #   if:  ${{ env.UPLOAD_XQERL_COMPILED_CODE}} == 'true'
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: xqerl-compiled-code-hashes
    #     path: xqerl-compiled-code.hashes
          # - name: If deployed upload previous xqerl-compiled-code hash as an artifact
    #   if:  ${{ env.DEPLOYED_XQERL_COMPILED_CODE}} == 'true'
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: deployed-xqerl-compiled-code-hash
    #     path: deployed-xqerl-compiled-code.hash
    # - name: Fetch certs and put into 'letsencypt' volume on 'github-actions' host
    #     run: |
    #         source .env
    #         echo ' - extract existing certs that reside in a docker *letsencrypt* volume on'
    #         echo '  GCE host into the *letsencrypt* volume that is on this host '
    #         docker volume ls | grep -q letsencrypt
    #         make certs-into-vol
    # - name: Create compiled-xqerl-code artifact
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: compiled-xqerl-code
    #     path: deploy/xqerl-compiled-code.tar
    # - name: Build 'static assets' from src files and put into 'static-assets' volume
    #   run: |
    #       source .env
    #       echo " - build static assets for [ ${DOMAIN} ]"
    #       make assets
    #       echo ' - the build artifact is the **static-assets.tar**'
    #       ls -al deploy/static-assets.tar
    # - name: Create static-assets artifact
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: static-assets
    #     path: deploy/static-assets.tar
    # # - name: Setup Gcloud
    # #   uses: googlecloudplatform/github-actions/setup-gcloud@master
    # #   with:
    # #       version: "270.0.0"
    # #       service_account_email: ${{ secrets.client_email }}
    # #       service_account_key: ${{ secrets.gce_key }}
    # # - name: Configure GCE project
    # #   run: |
    # #       source .env
    # #       echo ' - set up GCE project from .env vars '
    # #       gcloud config set project ${GCE_PROJECT}
    # #       gcloud config set compute/zone ${GCE_ZONE}
    # #       # gcloud compute instances list
    # #       gcloud compute config-ssh &>/dev/null
    # #       gcloud compute ssh ${GCE_NAME} --command \
    # #       "docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }}"
    # #       gcloud compute ssh ${GCE_NAME} --command \
    # #       "docker pull ${XQERL_DOCKER_IMAGE} && docker pull ${PROXY_DOCKER_IMAGE}"
    # #       gcloud compute ssh ${GCE_NAME} --command \
    # #       "ls deploy" > deployedTars.list
    # #       echo ::set-env name=DEPLOYED_NGINX_CONFIGURATION::$(grep 'nginx-configuration.tar' deployedTars.list && echo 'true' || echo 'false' )
    # # - name: Previous nginx-configuration Deploy
    # #   if:  ${{ env.DEPLOYED_NGINX_CONFIGURATION}} == 'true'
    # #   run: |
    # #      echo ' previous nginx-configuration tar exists'
    # #      source .env
    # #      gcloud compute ssh ${GCE_NAME} --command \
    # #      "docker run --rm --volume /home/${GCE_NAME}/deploy:/tmp \
    # #       --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} /tmp/nginx-configuration.tar" | tee nginx-configuration.hash
    # # - name: Previous nginx-configuration hash artifact
    # #   if:  ${{ env.DEPLOYED_NGINX_CONFIGURATION}} == 'true'
    # #   uses: actions/upload-artifact@v1
    # #   with:
    # #     name: deployed-nginx-configuration-hash
    # #     path: nginx-configuration.hash

# #          #gcloud info
# #    - name: Fetch certs and put into 'letsencypt' volume on 'github-actions' host
# #      run: |
# #          source .env
# #          echo ' - extract existing certs that reside in a docker *letsencrypt* volume on'
# #          echo '  GCE host into the *letsencrypt* volume that is on this host '
# #          docker volume ls | grep -q letsencrypt
# #          make certs-into-vol
# #          # TODO rm due to curl --resolve modify hosts file
# #          # sudo echo "127.0.0.1 ${TLS_COMMON_NAME}" | sudo tee -a /etc/hosts
# #    - name: Build and put 'nginx configuration' files into 'nginx-configuration' volume
# #      run: |
# #         source .env
# #         echo " - build generic nginx configuration"
# #         make proxy-build
# #         echo ' - the build artifact is the **nginx-configuration.tar**'
# #         ls -al deploy/nginx-configuration.tar
# #    - name: Create nginx-configuration artifact
# #      uses: actions/upload-artifact@v1
# #      with:
# #        name: nginx-configuration
# #        path: deploy/nginx-configuration.tar
# #    - name: Bring proxy container up on 'github-actions' host
# #      run: |
# #          echo ' - with our nginx-configuration to bring the nginx proxy up successfuly we need to'
# #          echo ' 1. have the certs in the path as specified in the config '
# #          echo ' 2. have a resolvable *proxy pass* as specified in the config '
# #          make proxy-up
# #    - name: Use Curl with Grep to run some website tests
# #      run: |
# #          source .env
# #          make proxy-tests
#
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #   - name: Checkout Repo
  #     uses: actions/checkout@v1
  #     with:
  #         fetch-depth: 1
  #   - name: Download Artifacts
  #     uses: actions/download-artifact@v1
  #     with:
  #         name: xqerl-compiled-code-hashes
  #         path: xqerl-compiled-code.hashes
  #   - name: Set environment variables
  #     run: |
  #         source .env
  #         echo ::set-env name=DEPLOY_XQERL_COMPILED_CODE::$( md5sum --check  xqerl-compiled-code.hashes && echo 'false' || echo 'true' )
  #   - name: Do only if xqerl-compiled-code.tar need to be deployed
  #     if:  ${{ env.DEPLOY_XQERL_COMPILED_CODE }} == 'true'
  #     run: |
  #           source .env
  #           echo "${{ env.DEPLOY_XQERL_COMPILED_CODE }}"
  #   - name: If no upload required
  #     if:  ${{ env.DEPLOY_XQERL_COMPILED_CODE }} == 'false'
  #     run: |
  #           source .env
  #           echo "${{ env.DEPLOY_XQERL_COMPILED_CODE }}"

   # - name: Md5 checksum
   #   run: |
   #       source .env
   #       ls -al nginx-configuration
   #       cat nginx-configuration.txt
   # - name: Setup Gcloud
   #   uses: googlecloudplatform/github-actions/setup-gcloud@master
   #   with:
   #       version: "270.0.0"
   #       service_account_email: ${{ secrets.client_email }}
   #       service_account_key: ${{ secrets.gce_key }}
   # - name: Configure GCE project
   #   run: |
   #       source .env
   #       echo ' - set up GCE project from .env vars '
   #       gcloud config set project ${GCE_PROJECT}
   #       gcloud config set compute/zone ${GCE_ZONE}
   #       # gcloud compute instances list
   #       gcloud compute config-ssh &>/dev/null
# #    - name: md5sum of deployed tar
# #      run: |
# #          source .env
# #          mkdir deployed 
# #          gcloud compute ssh ${GCE_NAME} --command \
# #          "docker run --rm --volume /home/${GCE_NAME}/deploy:/tmp \
# #           --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} /tmp/nginx-configuration.tar" | tee nginx-configuration.txt
# #          gcloud compute ssh ${GCE_NAME} --command \
# #          "docker run --rm --volume /home/${GCE_NAME}/deploy:/tmp \
# #           --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} /tmp/static-assets.tar" | tee static-assets.txt
# #          gcloud compute ssh ${GCE_NAME} --command \
# #          "docker run --rm --volume /home/${GCE_NAME}/deploy:/tmp \
# #           --entrypoint 'md5sum' ${XQERL_DOCKER_IMAGE} /tmp/xqerl-compiled-code.tar" | tee xqerl-compiled-code.txt
# #    - name: Download Artifacts
# #      uses: actions/download-artifact@v1
# #      with:
# #          name: nginx-configuration
# #    - name: Md5 checksum
# #      run: |
# #          source .env
# #          ls -al nginx-configuration
# #          cat nginx-configuration.txt
