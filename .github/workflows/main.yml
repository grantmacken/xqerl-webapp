name: continuous-integration
on:
  push:
    branches:
      - master
#https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#onevent_nametypes
# environment variables available to all jobs and steps in this workflow
env:
  github_sha: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
        with:
            fetch-depth: 1
      - name: Set environment variables
        run: | 
            echo '::set-env name=TERM::xterm'
      - name: Pull in docker images
        run: |
            source .env
            echo ' - pull in my docker images as helpers'
            docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }} &>/dev/null
            docker pull ${XQERL_DOCKER_IMAGE}
            docker pull ${PROXY_DOCKER_IMAGE}
            docker pull docker.pkg.github.com/grantmacken/alpine-scour/scour:0.0.2
            docker pull docker.pkg.github.com/grantmacken/alpine-zopfli/zopfli:0.0.1
            docker pull docker.pkg.github.com/grantmacken/alpine-cssnano/cssnano:0.0.3
      - name: Bring up the xqerl container, compile xQuery, then test restXQ routes
        run: |
            source .env
            echo ' starting xqerl will also: '
            echo ' - create the volumes we require'
            echo ' - create the network we require'
            make xqerl-up
            echo ' - compile build xQuery files to run on the beam'
            echo ' - the build artifact is the **xqerl-compiled-code.tar**'
            make xqerl-build
            ls -al deploy/xqerl-compiled-code.tar
            echo ' - take a peek at the running xqerl container instance'
            make xqerl-info
            echo ' - before we place a reverse proxy server before xqerl '
            echo '   we can test our **restXQ routes** using  *curl* and '
            echo '   the xqerl internal IPAddress and published port'
            make xqerl-tests
      - name: Build 'static assets' from src files and put into 'static-assets' volume
        run: |
            source .env
            echo " - build static assets for [ ${DOMAIN} ]"
            make assets
            echo ' - the build artifact is the **static-assets.tar**'
            ls -al deploy/static-assets.tar
      - name: Setup Gcloud
        uses: googlecloudplatform/github-actions/setup-gcloud@master
        with:
            version: "270.0.0"
            service_account_email: ${{ secrets.client_email }}
            service_account_key: ${{ secrets.gce_key }}
      - name: Configure GCE project
        run: |
            source .env
            echo ' - set up GCE project from .env vars '
            gcloud config set project ${GCE_PROJECT}
            gcloud config set compute/zone ${GCE_ZONE}
            # gcloud compute instances list
            gcloud compute config-ssh &>/dev/null
            gcloud compute ssh ${GCE_NAME} --command \
            "docker login docker.pkg.github.com --username ${REPO_OWNER} --password ${{ secrets.github_token }}"
            gcloud compute ssh ${GCE_NAME} --command \
            "docker pull ${XQERL_DOCKER_IMAGE} && docker pull ${PROXY_DOCKER_IMAGE}"
            #gcloud info
      - name: Fetch certs and put into 'letsencypt' volume on 'github-actions' host
        run: |
            source .env
            echo ' - extract existing certs that reside in a docker *letsencrypt* volume on'
            echo '  GCE host into the *letsencrypt* volume that is on this host '
            docker volume ls | grep -q letsencrypt
            make certs-into-vol
            # modify hosts file
            sudo echo "127.0.0.1 ${TLS_COMMON_NAME}" | sudo tee -a /etc/hosts
      - name: Build and put 'nginx configuration' files into 'nginx-configuration' volume
        run: |
           source .env
           echo " - build generic nginx configuration"
           make proxy-build
           echo ' - the build artifact is the **nginx-configuration.tar**'
           ls -al deploy/nginx-configuration.tar
      #- name: Bring proxy container up on 'github-actions' host
      #  run: |
      #      pushd proxy
      #      make up
      #      make info
      #      popd
      #- name: Use Curl with Grep to run some website tests
      #  run: |
      #      source .env
      #      pushd tests/proxy
      #      make 
      #      popd
      #- name: Take both containers down on 'github-actions' host
      #  run: |
      #      source .env
      #      pushd site/${DOMAIN} 
      #      make down
      #      popd
      #      pushd proxy
      #      make down
      #      popd
      #- name: Check deploy directory
      #  run: |
      #      source .env
      #      pushd deploy
      #      ls -al .
      #      popd
      #- name: Upload tars to GCE host and deploy using gcloud client
      #  run: |
      #      source .env
      #      pushd gcloud
      #      pwd
      #      make tars-into-gce-host
      #      make compiled-code-volume
      #      make xqerl-compile-code
      #      make static-assets-volume
      #      make site-lualib-volume
      #      make nginx-configuration-volume
      #      make nginx-configuration-test
      #      make proxy-reload
      #      popd
