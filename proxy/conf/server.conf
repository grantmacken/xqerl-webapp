# HTTPS server
server {
  listen 443      ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name  ~^(www\.)?(?<domain>.+)$;
# path to static files 'html' is docker volume
  root html;
  index index.html;
# specify charset
  charset utf-8;
# Lock Down
############
  include certs.conf;
  include tls.conf;
  include headers.conf;

location ~* ^/(index|index.html)?$ {
  rewrite "^.*$" / break;
  try_files $uri @proxy;
}

location ~* ^/_info$ {
     default_type text/plain;
     echo ' HI! ';
     echo host: $host;
     echo hostname: $hostname;
     echo uri: $uri;
     echo request_method: $request_method;
     echo https: $https;
     echo nginx_version: $nginx_version;
    # echo $server_name;
     echo server_port: $server_port;
     echo server_protocol: $server_protocol;
     echo realpath_root: $realpath_root;
     echo remote address: $remote_addr;
     echo local address: $server_addr;
     echo time iso: $time_iso8601;
     echo time local: $time_local;
}


location ~* ^/_callback$ {

  # access_by_lua_block{
  #   require("grantmacken.access").verifyToken()
  # }
  content_by_lua_block{
    require("grantmacken.access").verifyToken()
    -- ngx.say( access.version)
    --  access.verifyToken() )
  }
}

location ~* ^/tags/([\w]+)$ {
   rewrite "^/(.+)$" $1.html break;
   try_files $uri @proxy;
}

#  archive s
#  consists of 6 chars
#   char 1,2,3 is the base 60 for short year + ordinal days
#   char 4,5,6 is the base 60 for seconds from days start
location ~* "^/[0-9A-HJ-NP-Z_a-km-z]{6}$" {
   rewrite "^/(.+)$" /archive/$1 break;
   try_files $uri @proxy;
   }


# Exposed Interaction Endpoints for Domain
# 1. micropub    - JWT access controlled
# 2. webmention  - public
# 3. article    - JWT access controlled

location ~* "^/(micropub([?]{1}.+)?)$" {
  # access_by_lua_block{
  #   require("grantmacken.access").verifyToken()
  # }
  rewrite ^/?(.*)$ /$domain/$1 break;
  rewrite_by_lua_block {
     local ngx_re = require "ngx.re"
     local dt = ngx_re.split(ngx.utctime()," ")

     ngx.req.set_header("UTC", dt[1] .. 'T' .. dt[2] )
  }
  proxy_set_header   Host $host;
  proxy_pass http://xq;
}

location ~* "^/?webmention([?]{1}.+)?$" {
  # content_by_lua_block {
  #  require("grantmacken.webmention").processRequest()
  # }
 rewrite ^/?(.*)$ /$domain/$1 break;
 proxy_pass http://xq;
}

location @proxy {
  # include       proxy-cache.conf;
  rewrite ^/?(.*)$ /$domain/$1 break;
  # expires max;
  # only for html pages
  # add_header Strict-Transport-Security max-age=15768000;
  #  cookies
  #  io block: do not waste band width
  ##############################################
  proxy_hide_header       Set-Cookie;
  proxy_ignore_headers    Set-Cookie;
  # # important! Remember the special inheritance rules for proxy_set_header:
  # # http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_set_header
  proxy_set_header        Cookie "";
  # proxy_set_header   Host $host;
  proxy_pass http://xq;
  proxy_redirect     off;
}

################
#  STATIC ASSETS
#################

### STYLES
#############
# The ngx_http_gzip_static_module module allows sending
# precompressed files with the “.gz”
# filename extension instead of regular files.

location  = /styles {
  rewrite "^/?styles$" /resources/styles/main.css break;
  more_set_headers    "Content-Type: text/css; charset=utf-8";
  add_header X-Content-Type-Options nosniff;
  add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
  # log_not_found off;
}

###############################################################################
# ICONS
# anything in the icons dir is served as image/svg+xml
# resource is a gzipped svg so has extension svgz
# url does(should) not need an extension so rewrite creates one (always svgz)
# even if request is for svg
###############################################################################

location ~* /icons/.+ {
  rewrite "^/(icons)/(\w+)([?\.]{1}\w+)?$" /resources/$1/$2.svgz break;
  more_set_headers    "Content-Type: image/svg+xml; charset=utf-8";
  #more_set_headers    "Cache-Control: public,max-age=31536000,immutable";
  add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  expires max;
  root html/$domain;
  # log_not_found off;
}







###############################################################################
# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

}
